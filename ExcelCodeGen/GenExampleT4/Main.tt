<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(SolutionDir)GenExampleT4Model\bin\Debug\netstandard2.0\GenExampleT4Model.dll" #>
<#@ import namespace="GenExampleT4Model" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <#= RectangleModel.Namespace #>
{
    using System;
    
    public sealed class <#= RectangleModel.Class #>
    {   <#
            var types = RectangleModel.Types.Split(',');
            var props = RectangleModel.Properties.Split(',');
            var fields = RectangleModel.Fields.Split(',');
            var i = 0;

            foreach (var field in fields)
            {#>

        // The <#=field#> of the object.
        private <#=types[i]#> <#=field#>Value;

        // The <#=props[i]#> property for the object.
        public <#=types[i]#> <#=props[i]#> { get { return this.<#=field#>Value; }  }
            <# // next model member
                i++; 
            }#>
        
        public <#= RectangleModel.Class #>(<#  
            i = 0;
            foreach (var field in fields)
            {#><#=types[i]#> <#=field#><#if (i < fields.Length - 1) { #>, <#}
                // next model member
                i++;
            }#>)
        {
            <#  
            i = 0;
            foreach (var field in fields)
            {#>this.<#=field#>Value = <#=field#>;
            <# // next model member
                i++; 
            }#>}
        
        // The Area property for the object.
        public double Area { get { return <#= RectangleModel.AreaFormula #>; } }
        
        public override string ToString()
        {
            var result = string.Format("The rectangle object:\r\n Area = {0}", this.Area);
            <#foreach (var property in props)
            {#>result += string.Format("\r\n <#=property#> = {0}", <#=property#>);
            <#}#>return result;
        }
        
        public static void Main()
        {
            var testRectangle = new <#= RectangleModel.Class #>(<#= RectangleModel.InitialValues #>);
            System.Console.WriteLine(testRectangle.ToString());
        }
    }
}